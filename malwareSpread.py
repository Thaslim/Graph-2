"""
TC: O(n^2) n is the number of nodes in graph
SP: O(n)
"""
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfs(i, cl):
            if connections[i] != -1:
                return
            connections[i] = cl
            for j in range(n):
                if i == j:
                    continue
                if graph[i][j] == 1:
                    dfs(j, cl)

        n = len(graph)
        # find connected components
        connections = [-1] * (n)
        color = 0
        for i in range(n):
            if connections[i] == -1:
                dfs(i, color)
            color += 1
        # group nodes by color
        count_per_group = [0] * color
        for node in connections:
            count_per_group[node] += 1

        # find number of infected nodes from initial
        infected_count = [0] * color
        for node in initial:
            grp = connections[node]
            infected_count[grp] += 1
        # go over initial infected nodes and check if spread an be stopped from exactly one node
        res = -1
        for node in initial:
            if infected_count[connections[node]] == 1:
                if res == -1:
                    res = node
                elif (
                    count_per_group[connections[node]] > count_per_group[connections[res]]
                ):
                    res = node
                elif (
                    count_per_group[connections[node]]
                    == count_per_group[connections[res]]
                ):
                    res = min(res, node)
        if res == -1:
            return min(initial)
        else:
            return res
